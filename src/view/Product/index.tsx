import { ReactIcon } from '@assets/icon'
import { Box, Button, Container, Flex, Grid, GridItem, Text } from '@chakra-ui/react'
import Breadcrumb from '@components/Breadcrumb'
import { ButtonPrimary } from '@components/Button'
import CommentItem from '@components/Items/CommentItem'
import Layout from '@components/Layout'
import Pagination from '@components/Pagination'
import SimpleRating from '@components/Rating'
import Translation from '@components/Translate'
import { FETCH_COMMENT, FETCH_COMMENT_PAGINATION, FETCH_COMMENT_RATING, FETCH_PRODUCT_BY_ID } from '@redux/product/productAction'
import { selectProduct } from '@redux/product/productSlice'
import { mainColor } from '@theme/theme'
import Image from 'next/image'
import { useRouter } from 'next/router'
import { FC, useEffect, useState } from 'react'
import { useAppDispatch, useAppSelector } from 'redux/hooks'
import ProductInfo from './ProductInfo'

const ProductView: FC = () => {
    const dispatch = useAppDispatch()
    const router = useRouter()
    const productState = useAppSelector(selectProduct)

    useEffect(() => {
        dispatch({ type: FETCH_PRODUCT_BY_ID, payload: `product_id=${router.query.slug}` })
    }, [])

    return (
        <Layout>
            {/* <textarea cols={100} rows={100} onChange={(e) => console.log(e.target.value)} /> */}
            <Container maxW='container.xl' p={0} >
                <Breadcrumb className='my-6' />

                <Box bg={mainColor.white} p={10}>
                    <ProductInfo product={productState?.detail} />
                </Box>

                <Flex bg={mainColor.white} my={5} p={6} px={10}>
                    <Flex pr={20} gap={5} className='items-center' borderRight={`1px solid ${mainColor.gray4}`}>
                        <Box className='inline-flex rounded-full overflow-hidden' border={`1px solid ${mainColor.gray3}`}>
                            <Image
                                src='http://localhost:3031/file/63f57fbb429c700a63375886'
                                alt='avatar'
                                height={70}
                                width={70}
                            />
                        </Box>
                        <Box>
                            <Text className='text-lg' lineHeight='short'>nahanystore</Text>
                            <Text color={mainColor.gray3} mb={3}>Active 45 Hours Ago</Text>
                            <Flex gap={3}>
                                <ButtonPrimary size='md' gap={2}>
                                    <ReactIcon.IconIo5.IoChatbubbles size='1.5rem' />
                                    <Translation text='chat now' fontWeight={400} firstCapital />
                                </ButtonPrimary>
                                <Button size='md' variant='outline' gap={3}>
                                    <ReactIcon.IconAi.AiOutlineShop size='1.5rem' />
                                    <Translation text='view shop' fontWeight={400} firstCapital />
                                </Button>
                            </Flex>
                        </Box>
                    </Flex>

                    <Flex flex={1} pl={20} className='items-center'>
                        <Grid templateColumns='repeat(12,1fr)' w='80%' gap={6}>
                            {Array(6).fill(null).map((item, index) => (
                                <GridItem h='5' colSpan={4} key={index}>
                                    <Flex className='justify-between' w='100%'>
                                        <Text color={mainColor.gray3} className='text-lg'>Rating</Text>
                                        <Text color={mainColor.orange}>21</Text>
                                    </Flex>
                                </GridItem>
                            ))}
                        </Grid>
                    </Flex>
                </Flex>

                <Box bg={mainColor.white} p={5} mb={6}>
                    <Box className='p-3' bg={mainColor.gray}>
                        <Text className='text-xl font-normal'>Product Specifications</Text>
                    </Box>
                    <Box className='my-6 px-4'>
                        <Flex className='items-center mb-5'>
                            <Flex w='10rem' color={mainColor.gray3} fontSize='1rem'>Warranty Type</Flex>
                            <Flex>Supplier Warranty</Flex>
                        </Flex>
                        <Flex className='items-center mb-5'>
                            <Flex w='10rem' color={mainColor.gray3} fontSize='1rem'>Warranty Duration</Flex>
                            <Flex >6 Months</Flex>
                        </Flex>
                        <Flex className='items-center mb-5'>
                            <Flex w='10rem' color={mainColor.gray3} fontSize='1rem'>Country of Origin</Flex>
                            <Flex> China</Flex>
                        </Flex>
                        <Flex className='items-center mb-5'>
                            <Flex w='10rem' color={mainColor.gray3} fontSize='1rem'>Bag Style</Flex>
                            <Flex> Qu·∫≠n B·∫Øc T·ª´ Li√™m, H√† N·ªôi</Flex>
                        </Flex>
                        <Flex className='items-center mb-5'>
                            <Flex w='10rem' color={mainColor.gray3} fontSize='1rem'>Stock</Flex>
                            <Flex>1557</Flex>
                        </Flex>
                        <Flex className='items-center mb-5'>
                            <Flex w='10rem' color={mainColor.gray3}>Warranty Duration</Flex>
                            <Flex> Qu·∫≠n B·∫Øc T·ª´ Li√™m, H√† N·ªôi</Flex>
                        </Flex>
                    </Box>

                    <Box className='p-3' bg={mainColor.gray}>
                        <Text className='text-xl font-normal'>Product Description</Text>
                    </Box>

                    <Box className='my-6 px-4'>
                        *Th√¥ng tin s·∫£n ph·∫©m:
                        -K√≠ch th∆∞·ªõc: sizecm
                        -Ch·∫•t li·ªáu: Da PU
                        -M√†u s·∫Øc:
                        - Thi·∫øt k·∫ø r·∫•t d·ªÖ ph·ªëi h·ª£p c√πng nhi·ªÅu ki·ªÉu trang ph·ª•c kh√°c nhau gi√∫p c√°c b·∫°n kh√°ch iu n·ªØ b·ªõt lo l·∫Øng khi set up ƒë·ªì.
                        - Th√≠ch h·ª£p: ƒêi ch∆°i, ƒëi h·ªçc, ƒëi l√†m, du l·ªãch, c√¥ng s·ªü‚Ä¶

                        CAM K·∫æT C·ª¶A SHOP
                        - Kh√°ch ho√†n to√†n c√≥ th·ªÉ ƒë·ªïi tr·∫£, ho√†n ti·ªÅn n·∫øu shop giao sai m·∫´u, m√†u s·∫Øc s·ªë l∆∞·ª£ng hay ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.
                        - S·∫£n ph·∫©m gi·ªëng ·∫£nh m√¥ t·∫£ (·∫¢nh ho√†n to√†n do shop t·ª± ch·ª•p)
                        - H√£y nh·∫•n "Theo d√µi" shop ƒë·ªÉ ƒë∆∞·ª£c c·∫≠p nh·∫≠t nhi·ªÅu m√£ gi·∫£m gi√° v√† ∆∞u ƒë√£i kh√°c.
                        - N·∫øu c√≥ b·∫•t c·ª© th·∫Øc m·∫Øc n√†o xin li√™n h·ªá v·ªõi shop qua khung chat c·ªßa shop ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ s·ªõm nh·∫•t.

                        H∆Ø·ªöNG D·∫™N V·ªÜ SINH:
                        -Kh√¥ng gi·∫∑t t·∫©y b·∫±ng c√°c ch·∫•t t·∫©y r·ª≠a m·∫°nh
                        -Kh√¥ng n√™n gi·∫∑t chung v·ªõi c√°c s·∫£n ph·∫©m kh√°c
                        -Kh√¥ng n√™n s·∫•y kh√¥ trong m√°y gi·∫∑t s·∫Ω l√†m ·∫£nh h∆∞·ªõng ƒë·∫øn c√°c ph·∫ßn c·∫ßu k√¨ nh∆∞ m√≥c, kho√° c·ª©ng

                        C√°ch v·ªá sinh s·∫£n ph·∫©m: D√πng ch·∫•t t·∫©y r·ª≠a nh·∫π nh∆∞ x√† b√¥ng, s·ª≠a t·∫Øm ch√† ƒë√°nh b·ªçt l√™n xong ch√† nh·∫π l√™n v·∫£i. Sau ƒë√≥ gi·∫∑t nh·∫π l·∫°i b·∫±ng n∆∞·ªõc s·∫°ch Ph∆°i m√°t t·ª± nhi√™n tr√°nh √°nh n·∫Øng m·∫∑t tr·ªùi l√†m ·∫£nh h∆∞·ªõng ƒë·∫øn ch·∫•t li·ªáu v√† b·∫°c m√†u v·∫£i

                        üéÅüéÅüéÅNahany xin c·∫£m ∆°n qu√Ω kh√°ch ƒë√£ gh√© qua v√† tin t∆∞·ªüng l·ª±a ch·ªçn s·∫£n ph·∫©m c·ªßa shop.

                        #t√∫i_x√°ch  #t√∫i_x√°ch_n·ªØ_ƒëeo_ch√©o  #t√∫i_ƒëeo_n·ªØ_ƒëi_ch∆°i  #t√∫i_c√¥ng_s·ªü  #t√∫i_x√°ch_n·ªØ_cao_c·∫•p  #t√∫i_n·ªØ_ƒë·∫πp  #tui_xach_nu  #tui_ƒëeo_cheo  #t√∫i_x√°ch_ƒëi_ch∆°i  #t√∫i_k·∫πp_n√°ch
                    </Box>
                </Box>

                <ProductRating />
            </Container>
        </Layout >
    )
}

// split it

const ProductRating: FC = () => {
    const dispatch = useAppDispatch()
    const productState = useAppSelector(selectProduct)
    const router = useRouter()
    const [filter, setFilter] = useState('all')

    useEffect(() => {
        router.query?.slug && dispatch({ type: FETCH_COMMENT_RATING, payload: router.query?.slug })
    }, [])

    const handlefilter = (item) => {
        setFilter(item)
        dispatch({
            type: FETCH_COMMENT, payload: {
                product_id: router.query?.slug,
                page: 1,
                type: item
            }
        })
    }

    const handleSelect = (page: number) => {
        console.log(filter)
        dispatch({
            type: FETCH_COMMENT, payload: {
                product_id: router.query?.slug,
                page: page,
                type: filter
            }
        })
    }

    return (
        <Box bg={mainColor.white} p={6}>
            <Box className='p-3'>
                <Text className='text-xl font-normal'>Product Rating</Text>
            </Box>
            <Flex bg={mainColor.skin2} p={5} gap={20} mb={5}>
                <Flex className='items-center flex-col'>
                    <Text fontWeight={500} fontSize='2xl' color={mainColor.red}>
                        {productState?.commentRating?.star_avg?.value}/5
                    </Text>
                    <SimpleRating value={productState?.commentRating?.star_avg?.value} starSize={25} />
                </Flex>
                <Flex className='items-center' gap={4}>
                    {productState?.commentRating?.filter && Object.keys(productState?.commentRating?.filter)?.map(item => {
                        return (
                            <RatingFilterItem
                                key={item}
                                handleFilterStar={() => handlefilter(item)} active={filter ? filter === item : item === 'all'}
                                content={item} count={productState?.commentRating?.filter[item]}
                            />
                        )
                    })}
                </Flex>
            </Flex>
            <Box pl={4}>
                {productState.comment?.map(item => <CommentItem key={item._id} commentItem={item} />)}
            </Box>

            <Pagination totalPage={25} onSelect={handleSelect} />
        </Box>
    )
}


type RatingFilterItemProps = {
    active?: boolean
    count?: number
    content?: string
    handleFilterStar?: () => void
}
const RatingFilterItem: FC<RatingFilterItemProps> = ({ handleFilterStar, active = false, count, content }) => {

    const renderContent = () => {
        if (content?.includes('star')) return content?.split('_').reverse().join(" ")
        return content?.replace('_', ' ')
    }

    return (
        <Flex minW='7rem' gap={1} className='px-2 cursor-pointer items-center flex-wrap justify-center py-1 text-lg' border={`1px solid ${active ? mainColor.red : mainColor.gray4}`}
            bg={mainColor.white} color={active && mainColor.red} fontWeight={400}
            onClick={handleFilterStar}
        >
            <Translation text={renderContent()} firstCapital />
            {count !== undefined && <Text className='text-sm'>({count})</Text>}
        </Flex>
    )
}

export default ProductView
